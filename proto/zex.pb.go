// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zex.proto

/*
Package zex is a generated protocol buffer package.

It is generated from these files:
	zex.proto

It has these top-level messages:
	Service
	Cmd
	Pid
	Empty
	ID
*/
package zex

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enum status commands
type CmdType int32

const (
	CmdType_INVOKE CmdType = 0
	CmdType_RUN    CmdType = 1
)

var CmdType_name = map[int32]string{
	0: "INVOKE",
	1: "RUN",
}
var CmdType_value = map[string]int32{
	"INVOKE": 0,
	"RUN":    1,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Interface serivice, this is add services to zex
type Service struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=Addr" json:"Addr,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// Interface Commad, proxy command wrapping to pipeline to services
type Cmd struct {
	Type CmdType `protobuf:"varint,1,opt,name=Type,enum=zex.CmdType" json:"Type,omitempty"`
	Path string  `protobuf:"bytes,2,opt,name=Path" json:"Path,omitempty"`
	Body []byte  `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *Cmd) Reset()                    { *m = Cmd{} }
func (m *Cmd) String() string            { return proto.CompactTextString(m) }
func (*Cmd) ProtoMessage()               {}
func (*Cmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cmd) GetType() CmdType {
	if m != nil {
		return m.Type
	}
	return CmdType_INVOKE
}

func (m *Cmd) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Cmd) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// Pid pipeline group
type Pid struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Pid) Reset()                    { *m = Pid{} }
func (m *Pid) String() string            { return proto.CompactTextString(m) }
func (*Pid) ProtoMessage()               {}
func (*Pid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pid) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// Empty msg
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// ID
type ID struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*Service)(nil), "zex.Service")
	proto.RegisterType((*Cmd)(nil), "zex.Cmd")
	proto.RegisterType((*Pid)(nil), "zex.Pid")
	proto.RegisterType((*Empty)(nil), "zex.Empty")
	proto.RegisterType((*ID)(nil), "zex.ID")
	proto.RegisterEnum("zex.CmdType", CmdType_name, CmdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Zex services

type ZexClient interface {
	Register(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Empty, error)
	Pipeline(ctx context.Context, opts ...grpc.CallOption) (Zex_PipelineClient, error)
	Subscribe(ctx context.Context, in *Pid, opts ...grpc.CallOption) (*Empty, error)
}

type zexClient struct {
	cc *grpc.ClientConn
}

func NewZexClient(cc *grpc.ClientConn) ZexClient {
	return &zexClient{cc}
}

func (c *zexClient) Register(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/zex.Zex/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zexClient) Pipeline(ctx context.Context, opts ...grpc.CallOption) (Zex_PipelineClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zex_serviceDesc.Streams[0], c.cc, "/zex.Zex/Pipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &zexPipelineClient{stream}
	return x, nil
}

type Zex_PipelineClient interface {
	Send(*Cmd) error
	CloseAndRecv() (*Pid, error)
	grpc.ClientStream
}

type zexPipelineClient struct {
	grpc.ClientStream
}

func (x *zexPipelineClient) Send(m *Cmd) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zexPipelineClient) CloseAndRecv() (*Pid, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Pid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zexClient) Subscribe(ctx context.Context, in *Pid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/zex.Zex/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Zex services

type ZexServer interface {
	Register(context.Context, *Service) (*Empty, error)
	Pipeline(Zex_PipelineServer) error
	Subscribe(context.Context, *Pid) (*Empty, error)
}

func RegisterZexServer(s *grpc.Server, srv ZexServer) {
	s.RegisterService(&_Zex_serviceDesc, srv)
}

func _Zex_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZexServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zex.Zex/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZexServer).Register(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zex_Pipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZexServer).Pipeline(&zexPipelineServer{stream})
}

type Zex_PipelineServer interface {
	SendAndClose(*Pid) error
	Recv() (*Cmd, error)
	grpc.ServerStream
}

type zexPipelineServer struct {
	grpc.ServerStream
}

func (x *zexPipelineServer) SendAndClose(m *Pid) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zexPipelineServer) Recv() (*Cmd, error) {
	m := new(Cmd)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zex_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZexServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zex.Zex/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZexServer).Subscribe(ctx, req.(*Pid))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zex.Zex",
	HandlerType: (*ZexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Zex_Register_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Zex_Subscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipeline",
			Handler:       _Zex_Pipeline_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "zex.proto",
}

func init() { proto.RegisterFile("zex.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x93, 0x6c, 0x6d, 0x92, 0xa1, 0x94, 0x32, 0x28, 0x84, 0x1e, 0x24, 0xac, 0x20, 0xc1,
	0x43, 0xc1, 0xfa, 0x0b, 0xb4, 0xed, 0x21, 0x08, 0x69, 0x48, 0xd5, 0x83, 0xb7, 0xa6, 0x3b, 0xe8,
	0x82, 0x31, 0x21, 0x8d, 0x25, 0xe9, 0xaf, 0x97, 0xdd, 0x4d, 0x0e, 0x7a, 0xfb, 0xf6, 0xbd, 0x99,
	0x79, 0x3b, 0x03, 0xfe, 0x99, 0xda, 0x45, 0x55, 0x97, 0x4d, 0x89, 0xec, 0x4c, 0x2d, 0xbf, 0x07,
	0x77, 0x47, 0xf5, 0x49, 0x1e, 0x08, 0x11, 0x46, 0xc9, 0xbe, 0xa0, 0xc0, 0x0e, 0xed, 0xc8, 0xcf,
	0x34, 0x2b, 0xed, 0x51, 0x88, 0x3a, 0x70, 0x8c, 0xa6, 0x98, 0x6f, 0x81, 0xad, 0x0a, 0x81, 0x21,
	0x8c, 0x5e, 0xba, 0xca, 0x94, 0x4f, 0x97, 0x93, 0x85, 0x1a, 0xbc, 0x2a, 0x84, 0xd2, 0x32, 0xed,
	0xa8, 0xe6, 0x74, 0xdf, 0x7c, 0x0e, 0xcd, 0x8a, 0x95, 0xf6, 0x54, 0x8a, 0x2e, 0x60, 0xa1, 0x1d,
	0x4d, 0x32, 0xcd, 0xfc, 0x0a, 0x58, 0x2a, 0x05, 0x4e, 0xc1, 0x89, 0xd7, 0x7d, 0xba, 0x13, 0xaf,
	0xb9, 0x0b, 0x17, 0x9b, 0xa2, 0x6a, 0x3a, 0x7e, 0xa9, 0x8c, 0xff, 0xf6, 0xdd, 0x35, 0xb8, 0x7d,
	0x1c, 0x02, 0x8c, 0xe3, 0xe4, 0x6d, 0xfb, 0xbc, 0x99, 0x59, 0xe8, 0x02, 0xcb, 0x5e, 0x93, 0x99,
	0xbd, 0x3c, 0x01, 0x7b, 0xa7, 0x16, 0x6f, 0xc1, 0xcb, 0xe8, 0x43, 0x1e, 0x1b, 0xaa, 0xd1, 0x7c,
	0xb2, 0xdf, 0x77, 0x0e, 0xfa, 0x65, 0x22, 0x2c, 0xe4, 0xe0, 0xa5, 0xb2, 0xa2, 0x2f, 0xf9, 0x4d,
	0xe8, 0x0d, 0xcb, 0xcc, 0x0d, 0xa5, 0x52, 0x70, 0x2b, 0xb2, 0xf1, 0x06, 0xfc, 0xdd, 0x4f, 0x7e,
	0x3c, 0xd4, 0x32, 0x1f, 0x8a, 0x52, 0x29, 0xfe, 0x0e, 0xca, 0xc7, 0xfa, 0xba, 0x0f, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x86, 0xaa, 0x39, 0x71, 0x6a, 0x01, 0x00, 0x00,
}
