// Code generated by protoc-gen-go. DO NOT EDIT.
// source: c.proto

/*
Package c is a generated protocol buffer package.

It is generated from these files:
	c.proto

It has these top-level messages:
	Req
	Empty
*/
package c

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Empty msg
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Req)(nil), "c.Req")
	proto.RegisterType((*Empty)(nil), "c.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for C service

type CClient interface {
	CallA(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Empty, error)
	CallB(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Empty, error)
	CallC(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Empty, error)
}

type cClient struct {
	cc *grpc.ClientConn
}

func NewCClient(cc *grpc.ClientConn) CClient {
	return &cClient{cc}
}

func (c *cClient) CallA(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/c.C/CallA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cClient) CallB(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/c.C/CallB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cClient) CallC(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/c.C/CallC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for C service

type CServer interface {
	CallA(context.Context, *Req) (*Empty, error)
	CallB(context.Context, *Req) (*Empty, error)
	CallC(context.Context, *Req) (*Empty, error)
}

func RegisterCServer(s *grpc.Server, srv CServer) {
	s.RegisterService(&_C_serviceDesc, srv)
}

func _C_CallA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CServer).CallA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c.C/CallA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CServer).CallA(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _C_CallB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CServer).CallB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c.C/CallB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CServer).CallB(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _C_CallC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CServer).CallC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c.C/CallC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CServer).CallC(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _C_serviceDesc = grpc.ServiceDesc{
	ServiceName: "c.C",
	HandlerType: (*CServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallA",
			Handler:    _C_CallA_Handler,
		},
		{
			MethodName: "CallB",
			Handler:    _C_CallB_Handler,
		},
		{
			MethodName: "CallC",
			Handler:    _C_CallC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c.proto",
}

func init() { proto.RegisterFile("c.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x62, 0x4f, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4c, 0x56, 0x92, 0xe4, 0x62, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe2,
	0x62, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd8,
	0xb9, 0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x8d, 0xa2, 0xb8, 0x18, 0x9d, 0x85, 0xa4, 0xb9, 0x58,
	0x9d, 0x13, 0x73, 0x72, 0x1c, 0x85, 0xd8, 0xf4, 0x92, 0xf5, 0x82, 0x52, 0x0b, 0xa5, 0x38, 0xf4,
	0x92, 0xf5, 0xc0, 0xf2, 0x4a, 0x0c, 0x30, 0x49, 0x27, 0x7c, 0x92, 0xce, 0xd8, 0x24, 0x93, 0xd8,
	0xc0, 0x2e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xa7, 0x28, 0x50, 0x94, 0x00, 0x00,
	0x00,
}
