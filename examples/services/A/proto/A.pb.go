// Code generated by protoc-gen-go. DO NOT EDIT.
// source: A.proto

/*
Package A is a generated protocol buffer package.

It is generated from these files:
	A.proto

It has these top-level messages:
	Empty
*/
package A

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty msg
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Empty)(nil), "A.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for A service

type AClient interface {
	CallA(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CallB(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CallC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type aClient struct {
	cc *grpc.ClientConn
}

func NewAClient(cc *grpc.ClientConn) AClient {
	return &aClient{cc}
}

func (c *aClient) CallA(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/A.A/CallA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aClient) CallB(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/A.A/CallB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aClient) CallC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/A.A/CallC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for A service

type AServer interface {
	CallA(context.Context, *Empty) (*Empty, error)
	CallB(context.Context, *Empty) (*Empty, error)
	CallC(context.Context, *Empty) (*Empty, error)
}

func RegisterAServer(s *grpc.Server, srv AServer) {
	s.RegisterService(&_A_serviceDesc, srv)
}

func _A_CallA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).CallA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/A.A/CallA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).CallA(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _A_CallB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).CallB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/A.A/CallB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).CallB(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _A_CallC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).CallC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/A.A/CallC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).CallC(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _A_serviceDesc = grpc.ServiceDesc{
	ServiceName: "A.A",
	HandlerType: (*AServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallA",
			Handler:    _A_CallA_Handler,
		},
		{
			MethodName: "CallB",
			Handler:    _A_CallB_Handler,
		},
		{
			MethodName: "CallC",
			Handler:    _A_CallC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "A.proto",
}

func init() { proto.RegisterFile("A.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 84 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x62, 0x77, 0xd4, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x74, 0x54, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x34,
	0x4a, 0xe0, 0x62, 0x74, 0x14, 0x92, 0xe5, 0x62, 0x75, 0x4e, 0xcc, 0xc9, 0x71, 0x14, 0xe2, 0xd0,
	0x73, 0xd4, 0x03, 0x8b, 0x4b, 0xc1, 0x59, 0x4a, 0x0c, 0x30, 0x69, 0x27, 0xfc, 0xd2, 0xce, 0xd8,
	0xa5, 0x93, 0xd8, 0xc0, 0x96, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xae, 0xfc, 0x38, 0x7c,
	0x7f, 0x00, 0x00, 0x00,
}
